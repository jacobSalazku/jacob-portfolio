// Query TypeMap
import '@sanity/client';

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type FeatureBlock = {
  _type: 'featureBlock';
  title: LocalizedTitle;
  content: Record<string, BlockContent>;
};

export type LocalizedTitle = {
  _type: 'localizedTitle';
  nl?: string;
  en?: string;
  fr?: string;
};

export type Experience = {
  _id: string;
  _type: 'experience';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  timespan?: LocalizedTitle;
  slug?: Slug;
  project?: Project;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  tags?: TechStack[];
  publishedAt?: string;
  description?: Record<string, BlockContent>;
  text?: Record<string, BlockContent>;
  tasks?: Record<string, BlockContent>;
};

export type Project = {
  _id: string;
  _type: 'project';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  tags?: TechStack[];
  publishedAt?: string;
  text?: Record<string, BlockContent>;
  features?: FeatureBlock[];
};

export type TechStack = {
  _id: string;
  _type: 'techStack';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Post = {
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'author';
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  categories?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'category';
  }>;
  publishedAt?: string;
  body?: BlockContent;
};

export type Author = {
  _id: string;
  _type: 'author';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type Category = {
  _id: string;
  _type: 'category';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type BlockContent = {
  _type: 'blockContent';
  nl?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
  en?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
  fr?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | FeatureBlock
  | LocalizedTitle
  | Experience
  | Project
  | TechStack
  | Post
  | Author
  | Category
  | Slug
  | BlockContent
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/app/[locale]/_query.ts
// Variable: PROJECT_SLUG
// Query: *[_type == 'project']{	slug}
export type PROJECT_SLUGResult = Array<{
  slug: Slug | null;
}>;

// Source: ./src/app/[locale]/experience/_query.ts
// Variable: EXPERIENCE_QUERY
// Query: *[_type == "experience" && defined(slug.current)]|order(publishedAt desc)[0...12]{    _id,    title,    slug,    publishedAt,    mainImage,    timespan,    description,    tags[]->{      _id,      title,    },    "techStack": *[_type == "techStack" && references(^.id)]{      _id,      title,    }  }
export type EXPERIENCE_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  } | null;
  timespan: string | null;
  description: BlockContent | null;
  tags: Array<{
    _id: string;
    title: string | null;
  }> | null;
  techStack: Array<{
    _id: string;
    title: string | null;
  }>;
}>;

// Source: ./src/app/[locale]/projects/_query.ts
// Variable: PROJECT_QUERY
// Query: *[_type == "project" && defined(slug.current)]|order(publishedAt desc)[0...12]{      _id,      title,      slug,      publishedAt,      mainImage,      timespan,      description,      tags[]->{        _id,        title,      },      "techStack": *[_type == "techStack" && references(^.id)]{        _id,        title,      }    }
export type PROJECT_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  } | null;
  timespan: null;
  description: null;
  tags: Array<{
    _id: string;
    title: string | null;
  }> | null;
  techStack: Array<{
    _id: string;
    title: string | null;
  }>;
}>;

// Source: ./src/app/[locale]/experience/[slug]/_query.ts
// Variable: EXPERIENCE_DETAIL_PAGE
// Query: *[_type == "experience" && slug.current == $slug][0]  {    ...,    "tags": tags[]->,    "project": project->{        slug,      }  }
export type EXPERIENCE_DETAIL_PAGEResult = {
  _id: string;
  _type: 'experience';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  timespan?: string;
  slug?: Slug;
  project: {
    slug: Slug | null;
  } | null;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  tags: Array<{
    _id: string;
    _type: 'techStack';
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
  }> | null;
  publishedAt?: string;
  description?: BlockContent;
  text?: BlockContent;
  tasks?: BlockContent;
} | null;

// Source: ./src/app/[locale]/projects/[slug]/_query.ts
// Variable: PROJECT_DETAIL_PAGE
// Query: *[_type == "project" && slug.current == $slug][0]	{	  ...,	  "tags": tags[]->,	}
export type PROJECT_DETAIL_PAGEResult = {
  _id: string;
  _type: 'project';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  tags: Array<{
    _id: string;
    _type: 'techStack';
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
  }> | null;
  publishedAt?: string;
  text?: BlockContent;
  features?: Array<
    {
      _key: string;
    } & FeatureBlock
  >;
} | null;

declare module '@sanity/client' {
  interface SanityQueries {
    "*[_type == 'project']{\n\tslug\n}": PROJECT_SLUGResult;
    '\n  *[_type == "experience" && defined(slug.current)]|order(publishedAt desc)[0...12]{\n    _id,\n    title,\n    slug,\n    publishedAt,\n    mainImage,\n    timespan,\n    description,\n    tags[]->{\n      _id,\n      title,\n    },\n    "techStack": *[_type == "techStack" && references(^.id)]{\n      _id,\n      title,\n    }\n  }\n': EXPERIENCE_QUERYResult;
    '\n    *[_type == "project" && defined(slug.current)]|order(publishedAt desc)[0...12]{\n      _id,\n      title,\n      slug,\n      publishedAt,\n      mainImage,\n      timespan,\n      description,\n      tags[]->{\n        _id,\n        title,\n      },\n      "techStack": *[_type == "techStack" && references(^.id)]{\n        _id,\n        title,\n      }\n    }\n  ': PROJECT_QUERYResult;
    '\n  *[_type == "experience" && slug.current == $slug][0]\n  {\n    ...,\n    "tags": tags[]->,\n    "project": project->{\n        slug,\n      }\n  }\n': EXPERIENCE_DETAIL_PAGEResult;
    '\n\t*[_type == "project" && slug.current == $slug][0]\n\t{\n\t  ...,\n\t  "tags": tags[]->,\n\t}\n  ': PROJECT_DETAIL_PAGEResult;
  }
}
